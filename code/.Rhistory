library(here)
library(janitor)
library(ggplot2)
DailyActivity <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyActivity_merged.csv")
DailyCalories <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyCalories_merged.csv")
DailyIntensities <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyIntensities_merged.csv")
DailySteps <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailySteps_merged.csv")
DailySleep <- read.csv("../data/FitBit-Fitness-Tracker-Data/sleepDay_merged.csv")
weightLogInfo <- read.csv("../data/FitBit-Fitness-Tracker-Data/weightLogInfo_merged.csv")
head(DailyActivity)
head(DailyCalories)
head(DailyIntensities)
head(DailySteps)
head(DailySleep)
head(weightLogInfo)
column_formatting <- "snake"
# Using the clean_names under the janitor package
DailyActivity <- clean_names(DailyActivity, "snake")
DailyCalories<- clean_names(DailyCalories, "snake")
DailyIntensities <- clean_names(DailyIntensities, "snake")
DailySteps <- clean_names(DailySteps, "snake")
DailySleep <- clean_names(DailySleep, "snake")
weightLogInfo <- clean_names(weightLogInfo, "snake")
#Checking if dataframe columns have been updated
head(DailyActivity)
head(DailyCalories)
head(DailyIntensities)
head(DailySteps)
head(DailySleep)
head(weightLogInfo)
DailyActivity <- DailyActivity %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE), total_minutes = very_active_minutes +  fairly_active_minutes + lightly_active_minutes + sedentary_minutes)
DailyCalories <- DailyCalories %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE))
DailyIntensities <- DailyIntensities %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE), total_minutes = very_active_minutes +  fairly_active_minutes + lightly_active_minutes + sedentary_minutes)
DailySteps <- DailySteps %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE))
DailySleep <- DailySleep %>%
rename(activity_date = sleep_day) %>%
mutate(activity_date = date(mdy_hms(activity_date)), day_of_week = wday(activity_date, label = TRUE))
weightLogInfo <- weightLogInfo %>%
rename(activity_date = date) %>%
mutate(activity_date = date(mdy_hms(activity_date)), day_of_week = wday(activity_date, label = TRUE))
c(DailyActivity = DailyActivity %>%
filter(total_minutes > 1440) %>%
sum())
c(DailyIntensities = DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum())
#Check for possible inconsintencies between the DailyActivity and DailyCalories
merge(DailyActivity, DailyCalories, by = c("id", "activity_date")) %>%
filter(calories.x != calories.y) %>%
sum()
#Check for possible inconsintencies between the DailyActivity and DailyIntensities
merge(DailyActivity, DailyIntensities, by = c("id", "activity_date")) %>%
filter(total_minutes.x != total_minutes.y) %>%
sum()
#Check for possible inconsintencies between the DailyActivity and DailySteps
merge(DailyActivity, DailySteps, by = c("id", "activity_date")) %>%
filter(total_steps != step_total) %>%
sum()
# The duplicated function will check for duplicate rows and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have no duplicates it will return to zero
tibble("DailyActivity" = sum(duplicated(DailyActivity)),
DailyCalories = sum(duplicated(DailyCalories)),
DailyIntensities = sum(duplicated(DailyIntensities)),
DailySteps = sum(duplicated(DailySteps)),
DailySleep = sum(duplicated(DailySleep)),
weightLogInfo = sum(duplicated(weightLogInfo)))
#There are 413 observations in the initial dataset including the 3 duplicates
DailySleep <- distinct(DailySleep)
#Check if the duplicate rows have been removed. It should return 410.
tibble(distinct_sleep_observation = nrow(DailySleep))
# The is.na function will check for blank data and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have blank data it will return to zero
sum(is.na(DailyActivity))
sum(is.na(DailyCalories))
sum(is.na(DailyIntensities))
sum(is.na(DailySteps))
sum(is.na(DailySleep))
sum(is.na(weightLogInfo))
# Checking for the number of the unique ID
summary(weightLogInfo)
weightLogInfo <- weightLogInfo[,-5]
DailySummary <- DailyActivity %>%
full_join(DailySleep[-6], by = c("activity_date","id")) %>%
full_join(weightLogInfo[-8], by = c("activity_date","id"))
str(DailySummary)
# Summary on the Datasets
DailySummary %>%
select(total_steps, total_distance,sedentary_minutes,total_minutes,calories,total_minutes_asleep,weight_kg, bmi) %>%
summary()
library(tidyverse)
library(lubridate)
library(readr)
library(here)
library(janitor)
library(ggplot2)
DailyActivity <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyActivity_merged.csv")
DailyCalories <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyCalories_merged.csv")
DailyIntensities <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyIntensities_merged.csv")
DailySteps <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailySteps_merged.csv")
DailySleep <- read.csv("../data/FitBit-Fitness-Tracker-Data/sleepDay_merged.csv")
weightLogInfo <- read.csv("../data/FitBit-Fitness-Tracker-Data/weightLogInfo_merged.csv")
head(DailyActivity)
head(DailyCalories)
head(DailyIntensities)
head(DailySteps)
head(DailySleep)
head(weightLogInfo)
column_formatting <- "snake"
# Using the clean_names under the janitor package
DailyActivity <- clean_names(DailyActivity, "snake")
DailyCalories<- clean_names(DailyCalories, "snake")
DailyIntensities <- clean_names(DailyIntensities, "snake")
DailySteps <- clean_names(DailySteps, "snake")
DailySleep <- clean_names(DailySleep, "snake")
weightLogInfo <- clean_names(weightLogInfo, "snake")
#Checking if dataframe columns have been updated
head(DailyActivity)
head(DailyCalories)
head(DailyIntensities)
head(DailySteps)
head(DailySleep)
head(weightLogInfo)
DailyActivity <- DailyActivity %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE), total_minutes = very_active_minutes +  fairly_active_minutes + lightly_active_minutes + sedentary_minutes)
DailyCalories <- DailyCalories %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE))
DailyIntensities <- DailyIntensities %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE), total_minutes = very_active_minutes +  fairly_active_minutes + lightly_active_minutes + sedentary_minutes)
DailySteps <- DailySteps %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE))
DailySleep <- DailySleep %>%
rename(activity_date = sleep_day) %>%
mutate(activity_date = date(mdy_hms(activity_date)), day_of_week = wday(activity_date, label = TRUE))
weightLogInfo <- weightLogInfo %>%
rename(activity_date = date) %>%
mutate(activity_date = date(mdy_hms(activity_date)), day_of_week = wday(activity_date, label = TRUE))
c(DailyActivity = DailyActivity %>%
filter(total_minutes > 1440) %>%
sum())
c(DailyIntensities = DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum())
#Check for possible inconsintencies between the DailyActivity and DailyCalories
merge(DailyActivity, DailyCalories, by = c("id", "activity_date")) %>%
filter(calories.x != calories.y) %>%
sum()
#Check for possible inconsintencies between the DailyActivity and DailyIntensities
merge(DailyActivity, DailyIntensities, by = c("id", "activity_date")) %>%
filter(total_minutes.x != total_minutes.y) %>%
sum()
#Check for possible inconsintencies between the DailyActivity and DailySteps
merge(DailyActivity, DailySteps, by = c("id", "activity_date")) %>%
filter(total_steps != step_total) %>%
sum()
# The duplicated function will check for duplicate rows and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have no duplicates it will return to zero
tibble("DailyActivity" = sum(duplicated(DailyActivity)),
DailyCalories = sum(duplicated(DailyCalories)),
DailyIntensities = sum(duplicated(DailyIntensities)),
DailySteps = sum(duplicated(DailySteps)),
DailySleep = sum(duplicated(DailySleep)),
weightLogInfo = sum(duplicated(weightLogInfo)))
#There are 413 observations in the initial dataset including the 3 duplicates
DailySleep <- distinct(DailySleep)
#Check if the duplicate rows have been removed. It should return 410.
tibble(distinct_sleep_observation = nrow(DailySleep))
# The is.na function will check for blank data and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have blank data it will return to zero
sum(is.na(DailyActivity))
sum(is.na(DailyCalories))
sum(is.na(DailyIntensities))
sum(is.na(DailySteps))
sum(is.na(DailySleep))
sum(is.na(weightLogInfo))
# Checking for the number of the unique ID
summary(weightLogInfo)
weightLogInfo <- weightLogInfo[,-5]
DailySummary <- DailyActivity %>%
full_join(DailySleep[-6], by = c("activity_date","id")) %>%
full_join(weightLogInfo[-8], by = c("activity_date","id"))
str(DailySummary)
# The is.na function will check for blank data and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have blank data it will return to zero
sum(is.na(DailyActivity))
sum(is.na(DailyCalories))
sum(is.na(DailyIntensities))
sum(is.na(DailySteps))
sum(is.na(DailySleep))
sum(is.na(weightLogInfo))
# Summary of number observations for the different datasets
as.data.frame(tibble("DailyActivity" = nrow(DailyActivity),
"DailyCalories" = nrow(DailyCalories),
"DailyIntensities" = nrow(DailyIntensities),
"DailySteps" = nrow(DailySteps),
"DailySleep" = nrow(DailySleep),
"weightLogInfo" = nrow(weightLogInfo)))  %>%
pivot_longer(cols = c("DailyActivity","DailyCalories", "DailyIntensities", "DailySteps", "DailySleep", "weightLogInfo"), names_to = "feature", values_to = "observation")
View(DailySteps)
#Check for the number of logged activities
DailyActivity %>%
ggplot(mapping = aes(x = day_of_week)) +
geom_histogram()
#Check for the number of logged activities
DailyActivity %>%
ggplot(mapping = aes(x = day_of_week)) +
geom_histogram(binwidth=1)
#Check for the number of logged activities
DailyActivity %>%
ggplot(mapping = aes(x = day_of_week, stat="count")) +
geom_histogram(binwidth=1)
#Check for the number of logged activities
DailyActivity %>%
ggplot(mapping = aes( stat="count")) +
geom_histogram(binwidth=1)
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week)) +
geom_histogram(binwidth=1)
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="bin")) +
geom_histogram(binwidth=1)
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count")) +
geom_histogram(binwidth=1)
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count")) +
geom_histogram()
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count")) +
geom_bar()
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count"), color = 2, fill = 2) +
geom_bar()
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count"), color = 2, fill = 2) +
geom_bar() +
labs(x="Day of the Week", y="Logging Frequency")
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count", color = 2, fill = 2)) +
geom_bar() +
labs(x="Day of the Week", y="Logging Frequency")
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count"), color = 2, fill = 2) +
geom_bar() +
labs(x="Day of the Week", y="Logging Frequency")
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count"), fill = 2) +
geom_bar() +
labs(x="Day of the Week", y="Logging Frequency")
library(tidyverse)
library(lubridate)
library(readr)
library(here)
library(janitor)
library(ggplot2)
DailyActivity <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyActivity_merged.csv")
DailyCalories <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyCalories_merged.csv")
DailyIntensities <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailyIntensities_merged.csv")
DailySteps <- read.csv("../data/FitBit-Fitness-Tracker-Data/dailySteps_merged.csv")
DailySleep <- read.csv("../data/FitBit-Fitness-Tracker-Data/sleepDay_merged.csv")
weightLogInfo <- read.csv("../data/FitBit-Fitness-Tracker-Data/weightLogInfo_merged.csv")
head(DailyActivity) #For reporting, I will only be showing the main summary
#head(DailyCalories)
#head(DailyIntensities)
#head(DailySteps)
#head(DailySleep)
#head(weightLogInfo)
column_formatting <- "snake"
# Using the clean_names under the janitor package
DailyActivity <- clean_names(DailyActivity, "snake")
DailyCalories<- clean_names(DailyCalories, "snake")
DailyIntensities <- clean_names(DailyIntensities, "snake")
DailySteps <- clean_names(DailySteps, "snake")
DailySleep <- clean_names(DailySleep, "snake")
weightLogInfo <- clean_names(weightLogInfo, "snake")
#Checking if dataframe columns have been updated
head(DailyActivity) #For reporting, I will only be showing the main summary
#head(DailyCalories)
#head(DailyIntensities)
#head(DailySteps)
#head(DailySleep)
#head(weightLogInfo)
DailyActivity <- DailyActivity %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE), total_minutes = very_active_minutes +  fairly_active_minutes + lightly_active_minutes + sedentary_minutes)
DailyCalories <- DailyCalories %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE))
DailyIntensities <- DailyIntensities %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE), total_minutes = very_active_minutes +  fairly_active_minutes + lightly_active_minutes + sedentary_minutes)
DailySteps <- DailySteps %>%
rename(activity_date = activity_day) %>%
mutate(activity_date = mdy(activity_date), day_of_week = wday(activity_date, label = TRUE))
DailySleep <- DailySleep %>%
rename(activity_date = sleep_day) %>%
mutate(activity_date = date(mdy_hms(activity_date)), day_of_week = wday(activity_date, label = TRUE))
weightLogInfo <- weightLogInfo %>%
rename(activity_date = date) %>%
mutate(activity_date = date(mdy_hms(activity_date)), day_of_week = wday(activity_date, label = TRUE))
c(DailyActivity = DailyActivity %>%
filter(total_minutes > 1440) %>%
sum())
c(DailyIntensities = DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum())
#Check for possible inconsintencies between the DailyActivity and DailyCalories
merge(DailyActivity, DailyCalories, by = c("id", "activity_date")) %>%
filter(calories.x != calories.y) %>%
sum()
#Check for possible inconsintencies between the DailyActivity and DailyIntensities
merge(DailyActivity, DailyIntensities, by = c("id", "activity_date")) %>%
filter(total_minutes.x != total_minutes.y) %>%
sum()
#Check for possible inconsintencies between the DailyActivity and DailySteps
merge(DailyActivity, DailySteps, by = c("id", "activity_date")) %>%
filter(total_steps != step_total) %>%
sum()
# The duplicated function will check for duplicate rows and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have no duplicates it will return to zero
tibble("DailyActivity" = sum(duplicated(DailyActivity)),
DailyCalories = sum(duplicated(DailyCalories)),
DailyIntensities = sum(duplicated(DailyIntensities)),
DailySteps = sum(duplicated(DailySteps)),
DailySleep = sum(duplicated(DailySleep)),
weightLogInfo = sum(duplicated(weightLogInfo)))
#There are 413 observations in the initial dataset including the 3 duplicates
DailySleep <- distinct(DailySleep)
#Check if the duplicate rows have been removed. It should return 410.
tibble(distinct_sleep_observation = nrow(DailySleep))
# The is.na function will check for blank data and return it as TRUE. In consideration, Boolean True has a value of 1 and Boolean FALSE has a value of 0, so if we summed up the dataframes that have blank data it will return to zero
sum(is.na(DailyActivity))
sum(is.na(DailyCalories))
sum(is.na(DailyIntensities))
sum(is.na(DailySteps))
sum(is.na(DailySleep))
sum(is.na(weightLogInfo))
# Checking for the number of the unique ID
summary(weightLogInfo)
weightLogInfo <- weightLogInfo[,-5]
DailySummary <- DailyActivity %>%
full_join(DailySleep[-6], by = c("activity_date","id")) %>%
full_join(weightLogInfo[-8], by = c("activity_date","id"))
str(DailySummary)
# Summary on the Datasets
DailySummary %>%
select(total_steps, total_distance,sedentary_minutes,total_minutes,calories,total_minutes_asleep,weight_kg, bmi) %>%
summary()
# Summary of number observations for the different datasets
as.data.frame(tibble("DailyActivity" = nrow(DailyActivity),
"DailyCalories" = nrow(DailyCalories),
"DailyIntensities" = nrow(DailyIntensities),
"DailySteps" = nrow(DailySteps),
"DailySleep" = nrow(DailySleep),
"weightLogInfo" = nrow(weightLogInfo)))  %>%
pivot_longer(cols = c("DailyActivity","DailyCalories", "DailyIntensities", "DailySteps", "DailySleep", "weightLogInfo"), names_to = "feature", values_to = "observation")
# Summary of participants for each activity
ParticipantSummary <- as.data.frame(tibble("DailyActivity" = n_distinct(DailyActivity$id),
"DailyCalories" = n_distinct(DailyCalories$id),
"DailyIntensities" = n_distinct(DailyIntensities$id),
"DailySteps" = n_distinct(DailySteps$id),
"DailySleep" = n_distinct(DailySleep$id),
"weightLogInfo" = n_distinct(weightLogInfo$id)))
ParticipantSummary <- ParticipantSummary %>%
pivot_longer(cols = c("DailyActivity","DailyCalories", "DailyIntensities", "DailySteps", "DailySleep", "weightLogInfo"), names_to = "feature", values_to = "participant")
ParticipantSummary
# Remove Zero Value Data from the Individual Datasets
CleanedDailySteps <- DailySteps %>%
filter(step_total != 0)
CleanedDailyCalories <- DailyCalories %>%
filter(calories != 0)
CleanedDailyIntensities <- DailyIntensities %>%
filter(sedentary_minutes != 0)
CleanedDailySteps %>%
group_by(day_of_week) %>%
summarise(mean_total_steps = round(mean(step_total),2))  #create a summary of the mean total steps group by day_of_week
CleanedDailyCalories %>%
group_by(day_of_week) %>%
summarise(mean_calories = mean(calories))
# Average number of steps per by day of week
IntensityType <- tibble('avg_sedentary_minutes' = round(mean(CleanedDailyIntensities$sedentary_minutes), digits = 2),
'avg_lightly_active_minutes' = round(mean(CleanedDailyIntensities$lightly_active_minutes), digits = 2),
'avg_fairly_active_minutes' = round(mean(CleanedDailyIntensities$fairly_active_minutes), digits = 2),
'avg_very_active_minutes' = round(mean(CleanedDailyIntensities$very_active_minutes), digits = 2))
IntensityType <- IntensityType %>%
pivot_longer(cols = c("avg_sedentary_minutes","avg_lightly_active_minutes", "avg_fairly_active_minutes", "avg_very_active_minutes", ), names_to = "intensity_type", values_to = "mean_time")
IntensityType <- IntensityType %>%
mutate(percentage = round(mean_time/sum(mean_time)*100,2))
IntensityType
# Convert the time in minutes to hours - sleep time and time in bed
CleanedDailySleep <- DailySleep %>%
mutate(total_hours_asleep = total_minutes_asleep/60,
total_hours_in_bed = total_time_in_bed/60)
CleanedDailySleep %>%
group_by(day_of_week) %>%
summarise(mean_hours_asleep = mean(total_hours_asleep))
# Average number of steps per by day of week
average_daily_steps <- round(mean(CleanedDailySteps$step_total), digits = 2)
CleanedDailySteps %>%
group_by(day_of_week) %>%
summarise(mean_total_steps = round(mean(step_total),2)) %>%
ggplot() +
geom_col(mapping = aes(x = day_of_week, mean_total_steps), color = 2, fill = 2) +
geom_hline(yintercept = average_daily_steps, linetype = 'dashed', color = 9) +
geom_text(aes(y =average_daily_steps, label = average_daily_steps), x = 5, size = 3, vjust = -0.30)
# Average calories burned per by day of week
average_daily_calories <- round(mean(CleanedDailyCalories$calories), digits = 2)
CleanedDailyCalories %>%
group_by(day_of_week) %>%
summarise(mean_calories = mean(calories)) %>%  #create a summary of the mean calories burned group by day_of_week
ggplot() +
geom_col(mapping = aes(x = day_of_week, mean_calories), color = 2, fill = 2) +
labs(x="Day of the Week", y="Calories Burned") +
geom_hline(yintercept = average_daily_calories, linetype = 'dashed', color = 10) +
geom_text(aes(y =average_daily_calories, label = average_daily_calories), x = 5, size = 3, vjust = -0.30)
## Create a pie chart to check for the distributions of Intensity minutes.
# Average number of steps per by day of week
IntensityType <- tibble('avg_sedentary_minutes' = round(mean(CleanedDailyIntensities$sedentary_minutes), digits = 2),
'avg_lightly_active_minutes' = round(mean(CleanedDailyIntensities$lightly_active_minutes), digits = 2),
'avg_fairly_active_minutes' = round(mean(CleanedDailyIntensities$fairly_active_minutes), digits = 2),
'avg_very_active_minutes' = round(mean(CleanedDailyIntensities$very_active_minutes), digits = 2))
IntensityType <- IntensityType %>%
pivot_longer(cols = c("avg_sedentary_minutes","avg_lightly_active_minutes", "avg_fairly_active_minutes", "avg_very_active_minutes", ), names_to = "intensity_type", values_to = "mean_time")
IntensityType <- IntensityType %>%
mutate(percentage = round(mean_time/sum(mean_time)*100,2)) %>%
ggplot(aes(x = "", y = percentage, fill = intensity_type)) +
geom_bar( stat = "identity", width =1, show.legend = TRUE, color = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = ifelse(percentage <2,"", paste(round(percentage,digits = 2),"%",sep="")))
,position=position_stack(vjust = 0.5)
, color = 1)
IntensityType
# Convert the time in minutes to hours - sleep time and time in bed
CleanedDailySleep <- DailySleep %>%
mutate(total_hours_asleep = total_minutes_asleep/60,
total_hours_in_bed = total_time_in_bed/60)
# Average time by day of week
average_sleep_hours <- round(mean(CleanedDailySleep$total_hours_asleep), digits = 2)
average_in_bed_hours <- round(mean(CleanedDailySleep$total_hours_in_bed), digits = 2)
CleanedDailySleep %>%
group_by(day_of_week) %>%
summarise(mean_hours_asleep = mean(total_hours_asleep)) %>%
ggplot() +
geom_col(mapping = aes(x = day_of_week, mean_hours_asleep), color = 2, fill = 2) +
geom_hline(yintercept = average_sleep_hours, linetype = 'dashed', color = 10) +
geom_hline(yintercept = average_in_bed_hours, linetype = 'dashed', color = 1) +
geom_text(aes(y =average_sleep_hours, label = average_sleep_hours), x = 5, size = 3, vjust = -0.30) +
geom_text(aes(y =average_in_bed_hours, label = average_in_bed_hours), x = 5, size = 3, vjust = -0.30)
#Check for the number of logged activities
DailyActivity %>%
group_by(day_of_week) %>%
ggplot(mapping = aes(x = day_of_week, stat="count"), fill = 2) +
geom_bar() +
labs(x="Day of the Week", y="Logging Frequency")
c(DailyActivity = DailyActivity %>%
filter(total_minutes > 1440) %>%
sum())
c(DailyIntensities = DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum())
c(DailyActivity = DailyActivity %>%
filter(total_minutes > 1440) %>%
sum())
c(DailyIntensities = DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum())
DailyActivity %>%
filter(total_minutes > 1440) %>%
sum()
DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum()
#Check for inconsistencies on the Summary
DailyActivity %>%
filter(total_minutes > 1440) %>%
sum()
#Check for inconsistencies on the Individual Log
DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum()
#Check for inconsistencies on the Summary
sum(filter(DailyActivity, total_minutes > 1440))
#Check for inconsistencies on the Individual Log
DailyIntensities %>%
filter(total_minutes > 1440) %>%
sum()
#Check for inconsistencies on the Summary
sum(filter(DailyActivity, total_minutes > 1440))
#Check for inconsistencies on the Individual Log
sum(filter(DailyIntensities, total_minutes > 1440))
